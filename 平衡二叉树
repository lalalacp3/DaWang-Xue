1.自顶而下
#Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        if not root:
            return True
        def height(root):
            if not root:
                return 0
            return max(height(root.left),height(root.right))+1
        if abs(height(root.left)-height(root.right))>1:
            return False
        else:
            return self.isBalanced(root.left) and self.isBalanced(root.right)


2.当左右子树不平衡时立刻停止，当数不平衡时，令树的高度为-1.
class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        def height(root):
            if not root:
                return False
            left = height(root.left)
            right = height(root.right)
            if left==-1 or right==-1 or abs(left-right)>1:
                return -1
            return max(left,right)+1
        return height(root)!=-1
